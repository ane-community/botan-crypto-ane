//
// =BEGIN MIT LICENSE
// 
// The MIT License (MIT)
//
// Copyright (c) 2014 Andras Csizmadia
// http://www.vpmedia.hu
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// 
// =END MIT LICENSE
//

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

def MSYS_HOME = System.getenv('MSYS_HOME')
def MINGW_HOME = System.getenv('MINGW_HOME')
def PYTHON_HOME = System.getenv('PYTHONHOME')

def outputLibrary = new File(projectDir, '/libbotan-1.10.a')

if("${System.env.JENKINS_BUILD_VERSION}" != "null") {
    version = "${System.env.JENKINS_BUILD_VERSION}"
}

println "${group}.${project.name}-${version}"

def exeExt = ''
def configureOS = ''
import org.apache.tools.ant.taskdefs.condition.Os
if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    exeExt = '.exe'
    configureOS = '--os=mingw'
}

def buildDir = new File(projectDir, '/build')

task clean << {
    if (buildDir.isDirectory()) {
        delete(buildDir)
    }
}

task package_all << {    
    exec {
        workingDir = projectDir
        executable = "${PYTHON_HOME}/python${exeExt}"
        args = ['configure.py', configureOS, '--cpu=arm', '--gen-amalgamation', '--no-autoload', '--enable-modules=sha-512']
    }
    copy {
        from '.'
        into new File(projectDir, '/../android/src/main/jni')
        include 'botan_all.*'
    }    
    ant.replace(dir: "../android/src/main/jni", token: '#define BOTAN_TARGET_OS_HAS_WIN32_GET_SYSTEMTIME', value: '')
    ant.replace(dir: "../android/src/main/jni", token: '#define BOTAN_TARGET_OS_HAS_WIN32_VIRTUAL_LOCK', value: '')  
    exec {
        workingDir = projectDir
        executable = "${PYTHON_HOME}/python${exeExt}"
        args = ['configure.py', configureOS, '--cpu=x86_32']
    }    
    if (!outputLibrary.exists()) {          
        exec {
            workingDir = projectDir
            executable = "make${exeExt}"
            args = []
        }  
    }
}

task analyze << {
}

defaultTasks 'clean', 'package_all', 'analyze'